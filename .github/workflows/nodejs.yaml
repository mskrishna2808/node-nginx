name: nodejs Docker image Creation

on: 
  push:
    branches:
      - main
  # workflow_dispatch:

env:

  IMAGE_NAME: nginx
  IMAGE_TAG: 1.0.${{ github.run_number }}

jobs:
  creating-docker-image:
    runs-on: self-hosted
    steps:
      - name: git checkout
        uses: actions/checkout@v3
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

# Pushing docker images into Jfrog artifactory

      - name: Login to JFrog
        uses: docker/login-action@v1
        with:
          registry: mskrishna123.jfrog.io
          username: ${{ secrets.JF_USER }}
          password: ${{ secrets.JF_ACCESS_TOKEN }}

      - name: Extracting docker metadata
        id: meta
        uses: docker/metadata-action@v1
        with:
          images: mskrishna123.jfrog.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Push images to Jfrog
        id: build-and-push
        uses: docker/build-push-action@v2
        with:
          context: docker-images/nodejs
          push: true
          tags: mskrishna123.jfrog.io/docker-node/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}


# Pushing docker images into AWS ECR

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG docker-images/nodejs
          echo "Pushing image to AWS ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - name: pushing image to container
        run: |
          set -e
          ECR_IMAGE=416094998479.dkr.ecr.us-east-1.amazonaws.com/nodejs:${{ env.IMAGE_TAG }}
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition "ecs-app-task" --region "us-east-1")
          NEW_TASK_DEFINTIION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$ECR_IMAGE" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities)')
          NEW_TASK_INFO=$(aws ecs register-task-definition --region "us-east-1" --cli-input-json "$NEW_TASK_DEFINTIION")
          NEW_REVISION=$(echo $NEW_TASK_INFO | jq '.taskDefinition.revision')
          aws ecs update-service --cluster ecs-cluster --service ecs-service --task-definition ecs-app-task:${NEW_REVISION}